stages:
  - build
  - test
  - deploy
  - release

build-job:
  stage: build
  script:
    # this two things should be done somehow somewhen
    # - sudo apt install python3-pip
    # - pip3 install poetry
    - poetry install

unittests:
  stage: test
  before_script:
    - pip install pytest
  script:
    - pytest

coverage:
  stage: test
  before_script:
    - pip install pytest-cov
  script:
    - pytest --cov=src tests

pylint:
  stage: test
  tags:
    - linter
  image: python:3.7-slim
  before_script:
    - mkdir -p public/badges public/lint
    - echo undefined > public/badges/$CI_JOB_NAME.score
    - pip install pylint-gitlab
  script:
    - pylint --exit-zero --output-format=text $(find -type f -name "*.py" ! -path "**/.venv/**") | tee /tmp/pylint.txt
    - sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt > public/badges/$CI_JOB_NAME.score
    - pylint -j=10 --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > codeclimate.json
    - pylint -j=10 --exit-zero --output-format=pylint_gitlab.GitlabPagesHtmlReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > public/lint/index.html
  after_script:
    - anybadge --overwrite --label $CI_JOB_NAME --value=$(cat public/badges/$CI_JOB_NAME.score) --file=public/badges/$CI_JOB_NAME.svg 4=red 6=orange 8=yellow 10=green
    - |
      echo "Your score is: $(cat public/badges/$CI_JOB_NAME.score)"
  artifacts:
    paths:
      - public
    reports:
      codequality: codeclimate.json
    when: always

build-doc:
  stage: deploy
  timeout: 10m
  only:
    - develop
    - master
    - merge_requests
  tags:
    - doc
  script:
    - doxygen doxy.conf
    - lftp -e "set ssl:verify-certificate no; mirror -R doc /doc/$CI_PROJECT_NAME; quit" -p 23 -u doxygen,doxygen fileserver.eb.local
    - echo "Doc folder sent to the FTP server"

deploy-prod:
  stage: release
  script:
    - echo "This job deploys something from the $CI_COMMIT_BRANCH branch."
  environment: production
